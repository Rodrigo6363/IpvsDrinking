ylab("-log10(p-value)") +
geom_hline(yintercept = -log10(pval), linetype = "dashed", color = "grey50", size = 0.6) +
geom_vline(xintercept = log2(foldlog2), linetype = "dashed", color = "grey50", size = 0.6) +
geom_vline(xintercept = -log2(foldlog2), linetype = "dashed", color = "grey50", size = 0.6) +
geom_label_repel(data = genes_a_anotar,#enriched_proteins,
aes(x = get(foldchange.colNam),
y = -log10(get(pvalue.colNam)),
label = gene_symbols_or_id),
size = 3,
color = "black",
fill = "white",
box.padding = 0.5,
point.padding = 0.5,
max.overlaps = Inf,
inherit.aes = FALSE) +
guides(colour = guide_legend(nrow = 1))  # <- esto debe ir con "+" también
print(C)
# Create the plot without the 'NA' category in the legend
C <- ggplot(data = data_clean,
aes(x = get(foldchange.colNam),
y = -log10(get(pvalue.colNam)),
colour = ifelse(get(pvalue.colNam) <= pval & get(foldchange.colNam) >= log2(foldlog2),
"IP 5",
ifelse(get(pvalue.colNam) <= pval & get(foldchange.colNam) <= -log2(foldlog2),
"DR 2559",
"Non-enriched proteins")),
label = gene_symbols_or_id
)) +
geom_point(size = 0.9) +
scale_colour_manual(
name = "significantly more abundant:",
values = c(
"IP 5" = "#003366",
"DR 2559" = "#FFA500",
"Not significant" = "lightgrey"
)
)+
theme_classic() +
theme(
plot.title = element_blank(),
legend.position = c(1.5, 1.5),
legend.justification = c(1,1),
legend.direction = "vertical",
legend.background = element_blank(),
legend.text = element_text(size = 10),
legend.title = element_text(size = 10, face = "bold"),
axis.text = element_text(colour = "black")
) +
guides(colour = guide_legend(nrow = 1)) +
xlab("log2 fold change") +
ylab("-log10(p-value)") +
geom_hline(yintercept = -log10(pval), linetype = "dashed", color = "grey50", size = 0.6) +
geom_vline(xintercept = log2(foldlog2), linetype = "dashed", color = "grey50", size = 0.6) +
geom_vline(xintercept = -log2(foldlog2), linetype = "dashed", color = "grey50", size = 0.6) +
geom_label_repel(data = genes_a_anotar,#enriched_proteins,
aes(x = get(foldchange.colNam),
y = -log10(get(pvalue.colNam)),
label = gene_symbols_or_id),
size = 3,
color = "black",
fill = "white",
box.padding = 0.5,
point.padding = 0.5,
max.overlaps = Inf,
inherit.aes = FALSE)
genes_a_anotar <- c("SPTBN1", "RASGRF2", "UBXN2B", "SPARCL1", "PRSS59", "PTPN6", "FABP7")
genes_to_label <- data_clean %>%
filter(gene_symbols_or_id %in% genes_a_anotar)
# Create the plot without the 'NA' category in the legend
C <- ggplot(data = data_clean,
aes(x = get(foldchange.colNam),
y = -log10(get(pvalue.colNam)),
colour = ifelse(get(pvalue.colNam) <= pval & get(foldchange.colNam) >= log2(foldlog2),
"IP 5",
ifelse(get(pvalue.colNam) <= pval & get(foldchange.colNam) <= -log2(foldlog2),
"DR 2559",
"Non-enriched proteins")),
label = gene_symbols_or_id
)) +
geom_point(size = 0.9) +
scale_colour_manual(
name = "significantly more abundant:",
values = c(
"IP 5" = "#003366",
"DR 2559" = "#FFA500",
"Not significant" = "lightgrey"
)
)+
theme_classic() +
theme(
plot.title = element_blank(),
legend.position = c(1.5, 1.5),
legend.justification = c(1,1),
legend.direction = "vertical",
legend.background = element_blank(),
legend.text = element_text(size = 10),
legend.title = element_text(size = 10, face = "bold"),
axis.text = element_text(colour = "black")
) +
guides(colour = guide_legend(nrow = 1)) +
xlab("log2 fold change") +
ylab("-log10(p-value)") +
geom_hline(yintercept = -log10(pval), linetype = "dashed", color = "grey50", size = 0.6) +
geom_vline(xintercept = log2(foldlog2), linetype = "dashed", color = "grey50", size = 0.6) +
geom_vline(xintercept = -log2(foldlog2), linetype = "dashed", color = "grey50", size = 0.6) +
geom_label_repel(data = genes_a_anotar,#enriched_proteins,
aes(x = get(foldchange.colNam),
y = -log10(get(pvalue.colNam)),
label = gene_symbols_or_id),
size = 3,
color = "black",
fill = "white",
box.padding = 0.5,
point.padding = 0.5,
max.overlaps = Inf,
inherit.aes = FALSE)
print(C)
# Create the plot without the 'NA' category in the legend
C <- ggplot(data = data_clean,
aes(x = get(foldchange.colNam),
y = -log10(get(pvalue.colNam)),
colour = ifelse(get(pvalue.colNam) <= pval & get(foldchange.colNam) >= log2(foldlog2),
"IP 5",
ifelse(get(pvalue.colNam) <= pval & get(foldchange.colNam) <= -log2(foldlog2),
"DR 2559",
"Non-enriched proteins")),
label = gene_symbols_or_id
)) +
geom_point(size = 0.9) +
scale_colour_manual(
name = "significantly more abundant:",
values = c(
"IP 5" = "#003366",
"DR 2559" = "#FFA500",
"Not significant" = "lightgrey"
)
)+
theme_classic() +
theme(
plot.title = element_blank(),
legend.position = c(1.5, 1.5),
legend.justification = c(1,1),
legend.direction = "vertical",
legend.background = element_blank(),
legend.text = element_text(size = 10),
legend.title = element_text(size = 10, face = "bold"),
axis.text = element_text(colour = "black")
) +
guides(colour = guide_legend(nrow = 1)) +
xlab("log2 fold change") +
ylab("-log10(p-value)") +
geom_hline(yintercept = -log10(pval), linetype = "dashed", color = "grey50", size = 0.6) +
geom_vline(xintercept = log2(foldlog2), linetype = "dashed", color = "grey50", size = 0.6) +
geom_vline(xintercept = -log2(foldlog2), linetype = "dashed", color = "grey50", size = 0.6) +
geom_label_repel(data = genes_to_label,#enriched_proteins,
aes(x = get(foldchange.colNam),
y = -log10(get(pvalue.colNam)),
label = gene_symbols_or_id),
size = 3,
color = "black",
fill = "white",
box.padding = 0.5,
point.padding = 0.5,
max.overlaps = Inf,
inherit.aes = FALSE)
print(C)
browseURL("plotly_plot.html")
genes_a_anotar <- c("SPTBN1", "RASGRF2", "UBXN2B", "SPARCL1", "PRSS59", "PTPN6", "FABP7", "SPOCK2")
genes_to_label <- data_clean %>%
filter(gene_symbols_or_id %in% genes_a_anotar)
# Create the plot without the 'NA' category in the legend
C <- ggplot(data = data_clean,
aes(x = get(foldchange.colNam),
y = -log10(get(pvalue.colNam)),
colour = ifelse(get(pvalue.colNam) <= pval & get(foldchange.colNam) >= log2(foldlog2),
"IP 5",
ifelse(get(pvalue.colNam) <= pval & get(foldchange.colNam) <= -log2(foldlog2),
"DR 2559",
"Non-enriched proteins")),
label = gene_symbols_or_id
)) +
geom_point(size = 0.9) +
scale_colour_manual(
name = "significantly more abundant:",
values = c(
"IP 5" = "#003366",
"DR 2559" = "#FFA500",
"Not significant" = "lightgrey"
)
)+
theme_classic() +
theme(
plot.title = element_blank(),
legend.position = c(1.5, 1.5),
legend.justification = c(1,1),
legend.direction = "vertical",
legend.background = element_blank(),
legend.text = element_text(size = 10),
legend.title = element_text(size = 10, face = "bold"),
axis.text = element_text(colour = "black")
) +
guides(colour = guide_legend(nrow = 1)) +
xlab("log2 fold change") +
ylab("-log10(p-value)") +
geom_hline(yintercept = -log10(pval), linetype = "dashed", color = "grey50", size = 0.6) +
geom_vline(xintercept = log2(foldlog2), linetype = "dashed", color = "grey50", size = 0.6) +
geom_vline(xintercept = -log2(foldlog2), linetype = "dashed", color = "grey50", size = 0.6) +
geom_label_repel(data = genes_to_label,#enriched_proteins,
aes(x = get(foldchange.colNam),
y = -log10(get(pvalue.colNam)),
label = gene_symbols_or_id),
size = 3,
color = "black",
fill = "white",
box.padding = 0.5,
point.padding = 0.5,
max.overlaps = Inf,
inherit.aes = FALSE)
print(C)
ggsave(paste0(Folderfig, "/volcano.svg"), plot = DEAvolplot, width = 8, height = 6, dpi = 300)
genes_a_anotar <- c("SPTBN1", "RASGRF2", "UBXN2B", "SPARCL1", "PRSS59", "PTPN6", "FABP7", "SPOCK2")
genes_to_label <- data_clean %>%
filter(gene_symbols_or_id %in% genes_a_anotar)
# Create the plot without the 'NA' category in the legend
C <- ggplot(data = data_clean,
aes(x = get(foldchange.colNam),
y = -log10(get(pvalue.colNam)),
colour = ifelse(get(pvalue.colNam) <= pval & get(foldchange.colNam) >= log2(foldlog2),
"IP 5",
ifelse(get(pvalue.colNam) <= pval & get(foldchange.colNam) <= -log2(foldlog2),
"DR 2559",
"Non-enriched proteins")),
label = gene_symbols_or_id
)) +
geom_point(size = 0.9) +
scale_colour_manual(
name = "significantly more abundant:",
values = c(
"IP 5" = "#003366",
"DR 2559" = "#FFA500",
"Not significant" = "lightgrey"
)
)+
theme_classic() +
theme(
plot.title = element_blank(),
legend.position = c(1.5, 1.5),
legend.justification = c(1,1),
legend.direction = "vertical",
legend.background = element_blank(),
legend.text = element_text(size = 10),
legend.title = element_text(size = 10, face = "bold"),
axis.text = element_text(colour = "black")
) +
guides(colour = guide_legend(nrow = 1)) +
xlab("log2 fold change") +
ylab("-log10(p-value)") +
geom_hline(yintercept = -log10(pval), linetype = "dashed", color = "grey50", size = 0.6) +
geom_vline(xintercept = log2(foldlog2), linetype = "dashed", color = "grey50", size = 0.6) +
geom_vline(xintercept = -log2(foldlog2), linetype = "dashed", color = "grey50", size = 0.6) +
geom_label_repel(data = genes_to_label,#enriched_proteins,
aes(x = get(foldchange.colNam),
y = -log10(get(pvalue.colNam)),
label = gene_symbols_or_id),
size = 3,
color = "black",
fill = "white",
box.padding = 0.5,
point.padding = 0.5,
max.overlaps = Inf,
inherit.aes = FALSE)
DEAvolplot <- C
print(C)
rm(C)
ggsave(paste0(Folderfig, "/volcano.svg"), plot = DEAvolplot, width = 8, height = 6, dpi = 300)
svg(filename = paste0(Folderfig, "/boxplot_intensity_group_NC.svg"), width = 8, height = 6)
par(mar = c(5, 4, 1, 2), cex.main = 0.9, mfrow = c(1,1), cex.axis = 0.9)
# Si las columnas de control vienen después, puedes limitar así:
boxplot(prot[, col.start.cond1:(col.start.cond1 + cond1 + cond2 - 1)],
las = 2,
col = c(rep("#DCCB4E", cond1), rep("#E98905", cond2)),  # solo IP y DR
pch = 20,
ylab = "log2 protein intensity")
dev.off()
svg(filename = paste0(Folderfig, "/boxplot_intensity_group_clean.svg"), width = 8, height = 6)
# Definir colores por grupo (IP y DR)
colors <- c(rep("#DCCB4E", cond1), rep("#E98905", cond2))  # amarillo y naranja
# Ajustar márgenes y quitar marco del plot
par(mar = c(5, 4, 1, 2), bty = "n", cex.main = 0.9, mfrow = c(1,1), cex.axis = 0.9)
# Datos a graficar (solo IP y DR, sin control)
data_subset <- prot[, col.start.cond1:(col.start.cond1 + cond1 + cond2 - 1)]
# Dibujar boxplot sin relleno (col = NA) y sin marco
boxplot(data_subset,
las = 2,
border = colors,     # color del contorno
col = NA,            # sin relleno
pch = NA,            # sin puntos (los ponemos después)
ylab = "log2 protein intensity",
axes = FALSE)        # quitamos ejes por defecto
# Añadir ejes X e Y
axis(1, at = 1:ncol(data_subset), labels = colnames(data_subset), las = 2, col = "black", col.axis = "black")
axis(2, col = "black", col.axis = "black")
# Dibujar los puntos encima (scatter "jitter")
for (i in 1:ncol(data_subset)) {
points(jitter(rep(i, nrow(data_subset))), data_subset[[i]],
col = adjustcolor(colors[i], alpha.f = 0.5),
pch = 16, cex = 0.6)
}
dev.off()
svg(filename = paste0(Folderfig, "/boxplot_intensity_group_clean_outliers.svg"), width = 8, height = 6)
# Colores para cada condición (IP, DR)
colors <- c(rep("#DCCB4E", cond1), rep("#E98905", cond2))  # amarillo y naranja
# Subset sin control
data_subset <- prot[, col.start.cond1:(col.start.cond1 + cond1 + cond2 - 1)]
# Configurar márgenes y sin caja
par(mar = c(5, 4, 1, 2), bty = "n", cex.axis = 0.9)
# Dibujar boxplot: sin relleno, sin puntos, solo contornos de colores
box_stats <- boxplot(data_subset,
las = 2,
border = colors,
col = NA,
pch = NA,      # no puntos automáticos
ylab = "log2 protein intensity",
axes = FALSE)  # sin ejes por defecto
# Ejes X e Y
axis(1, at = 1:ncol(data_subset), labels = colnames(data_subset), las = 2, col = "black", col.axis = "black")
axis(2, col = "black", col.axis = "black")
# Dibujar solo los puntos outliers manualmente
for (i in 1:ncol(data_subset)) {
y_vals <- data_subset[[i]]
stats <- boxplot.stats(y_vals)
outliers <- stats$out
if (length(outliers) > 0) {
outlier_positions <- which(y_vals %in% outliers)
points(rep(i, length(outliers)), outliers,
col = adjustcolor(colors[i], alpha.f = 0.7),
pch = 16, cex = 0.7)
}
}
dev.off()
svg(filename = paste0(Folderfig, "/boxplot_intensity_group_clean_outliers.svg"), width = 8, height = 6)
# Colores para IP y DR
colors <- c(rep("#DCCB4E", cond1), rep("#E98905", cond2))  # amarillo y naranja
# Datos sin control
data_subset <- prot[, col.start.cond1:(col.start.cond1 + cond1 + cond2 - 1)]
# Márgenes ajustados y sin caja
par(mar = c(5, 4, 1, 2), bty = "n", cex.axis = 0.9, xaxs = "i", yaxs = "i")
# Boxplot sin relleno, contorno coloreado, cajas estrechas
box_stats <- boxplot(data_subset,
las = 2,
border = colors,
col = NA,
pch = NA,
ylab = "log2 protein intensity",
axes = FALSE,
boxwex = 0.4)  # <--- controla el ancho de la caja (por defecto es 0.8)
# Ejes pegados y visibles
axis(1, at = 1:ncol(data_subset), labels = colnames(data_subset), las = 2, col = "black", col.axis = "black")
axis(2, col = "black", col.axis = "black")
# Dibujar los outliers únicamente
for (i in 1:ncol(data_subset)) {
y_vals <- data_subset[[i]]
stats <- boxplot.stats(y_vals)
outliers <- stats$out
if (length(outliers) > 0) {
points(rep(i, length(outliers)), outliers,
col = adjustcolor(colors[i], alpha.f = 0.7),
pch = 16, cex = 0.7)
}
}
dev.off()
svg(filename = paste0(Folderfig, "/boxplot_intensity_group_clean_outliers_fixedAxes.svg"), width = 8, height = 6)
# Colores para cada condición
colors <- c(rep("#DCCB4E", cond1), rep("#E98905", cond2))
# Subset de datos (sin control)
data_subset <- prot[, col.start.cond1:(col.start.cond1 + cond1 + cond2 - 1)]
# Márgenes ajustados y ejes desde 0 sin espacio extra
par(mar = c(5, 4, 1, 1), bty = "n", cex.axis = 0.9, xaxs = "i", yaxs = "i")
# Dibujar boxplot sin relleno, sin puntos por defecto, cajas más finas
boxplot(data_subset,
las = 2,
border = colors,
col = NA,
pch = NA,
ylab = "log2 protein intensity",
axes = FALSE,
boxwex = 0.4,
ylim = range(data_subset, na.rm = TRUE))  # asegura que se usen los ejes completos
# Añadir ejes "tocando"
axis(2, at = pretty(range(data_subset, na.rm = TRUE)), col = "black", col.axis = "black", las = 1)
axis(1, at = 1:ncol(data_subset), labels = colnames(data_subset), las = 2, col = "black", col.axis = "black")
# Dibujar solo los outliers
for (i in 1:ncol(data_subset)) {
y_vals <- data_subset[[i]]
stats <- boxplot.stats(y_vals)
outliers <- stats$out
if (length(outliers) > 0) {
points(rep(i, length(outliers)), outliers,
col = adjustcolor(colors[i], alpha.f = 0.7),
pch = 16, cex = 0.7)
}
}
# Línea en X y Y para forzar visualmente que se "toquen"
abline(h = par("usr")[3], v = par("usr")[1], col = "black", lwd = 1)
dev.off()
# Subset sin control
data_subset <- prot[, col.start.cond1:(col.start.cond1 + cond1 + cond2 - 1)]
# Añadir nombre de muestra como columna (para que no se pierdan)
data_long <- data_subset %>%
pivot_longer(cols = everything(), names_to = "Sample", values_to = "Intensity")
# Añadir grupo basado en el nombre
data_long <- data_long %>%
mutate(Group = ifelse(grepl("_IP", Sample), "IP", "DR"))
# Colores por grupo
colors <- c("IP" = "#DCCB4E", "DR" = "#E98905")
p <- ggplot(data_long, aes(x = Sample, y = Intensity, color = Group)) +
geom_boxplot(outlier.colour = NA, fill = NA, size = 0.8) +  # sin relleno, sin outliers
geom_jitter(data = function(d) {
# Solo los outliers
d %>% group_by(Sample) %>%
mutate(Q1 = quantile(Intensity, 0.25, na.rm = TRUE),
Q3 = quantile(Intensity, 0.75, na.rm = TRUE),
IQR = Q3 - Q1,
is_outlier = Intensity < (Q1 - 1.5 * IQR) | Intensity > (Q3 + 1.5 * IQR)) %>%
filter(is_outlier)
},
aes(x = Sample, y = Intensity),
width = 0.2, size = 1, alpha = 0.5) +
scale_color_manual(values = colors) +
theme_classic() +
xlab("") +
ylab("log2 protein intensity") +
theme(
axis.text.x = element_text(angle = 45, hjust = 1, color = "black"),
axis.text.y = element_text(color = "black"),
axis.line = element_line(color = "black"),
legend.position = "none"
)
ggsave(filename = paste0(Folderfig, "/boxplot_intensity_group_ggplot.svg"),
plot = p, width = 8, height = 6, dpi = 300)
# Preparar datos (como antes)
data_subset <- prot[, col.start.cond1:(col.start.cond1 + cond1 + cond2 - 1)]
data_long <- data_subset %>%
pivot_longer(cols = everything(), names_to = "Sample", values_to = "Intensity") %>%
mutate(Group = ifelse(grepl("_IP", Sample), "IP", "DR"))
# Extraer solo outliers sin jitter
outliers_df <- data_long %>%
group_by(Sample) %>%
mutate(
Q1 = quantile(Intensity, 0.25, na.rm = TRUE),
Q3 = quantile(Intensity, 0.75, na.rm = TRUE),
IQR = Q3 - Q1,
is_outlier = Intensity < (Q1 - 1.5 * IQR) | Intensity > (Q3 + 1.5 * IQR)
) %>%
filter(is_outlier)
# Colores
colors <- c("IP" = "#DCCB4E", "DR" = "#E98905")
# Plot
p <- ggplot(data_long, aes(x = Sample, y = Intensity, color = Group)) +
geom_boxplot(width = 0.3, outlier.shape = NA, fill = NA, size = 0.8) +  # cajas estrechas
geom_point(data = outliers_df, aes(x = Sample, y = Intensity),
inherit.aes = FALSE,
size = 1.2, shape = 16,
alpha = 0.7,
color = rep(colors, times = c(cond1, cond2))) +  # color de puntos igual al grupo
scale_color_manual(values = colors) +
theme_classic() +
xlab("") +
ylab("log2 protein intensity") +
theme(
axis.text.x = element_text(angle = 45, hjust = 1, color = "black"),
axis.text.y = element_text(color = "black"),
axis.line = element_line(color = "black"),
legend.position = "none"
)
ggsave(filename = paste0(Folderfig, "/boxplot_intensity_group_ggplot.svg"),
plot = p, width = 8, height = 6, dpi = 300)
# Subset sin control
data_subset <- prot[, col.start.cond1:(col.start.cond1 + cond1 + cond2 - 1)]
# Añadir nombre de muestra como columna (para que no se pierdan)
data_long <- data_subset %>%
pivot_longer(cols = everything(), names_to = "Sample", values_to = "Intensity")
# Añadir grupo basado en el nombre
data_long <- data_long %>%
mutate(Group = ifelse(grepl("_IP", Sample), "IP", "DR"))
# Colores por grupo
colors <- c("IP" = "#DCCB4E", "DR" = "#E98905")
p <- ggplot(data_long, aes(x = Sample, y = Intensity, color = Group)) +
geom_boxplot(outlier.colour = NA, fill = NA, size = 0.8) +  # sin relleno, sin outliers
geom_jitter(data = function(d) {
# Solo los outliers
d %>% group_by(Sample) %>%
mutate(Q1 = quantile(Intensity, 0.25, na.rm = TRUE),
Q3 = quantile(Intensity, 0.75, na.rm = TRUE),
IQR = Q3 - Q1,
is_outlier = Intensity < (Q1 - 1.5 * IQR) | Intensity > (Q3 + 1.5 * IQR)) %>%
filter(is_outlier)
},
aes(x = Sample, y = Intensity),
width = 0.2, size = 1, alpha = 0.5) +
scale_color_manual(values = colors) +
theme_classic() +
xlab("") +
ylab("log2 protein intensity") +
theme(
axis.text.x = element_text(angle = 45, hjust = 1, color = "black"),
axis.text.y = element_text(color = "black"),
axis.line = element_line(color = "black"),
legend.position = "none"
)
ggsave(filename = paste0(Folderfig, "/boxplot_intensity_group_ggplot.svg"),
plot = p, width = 8, height = 6, dpi = 300)
