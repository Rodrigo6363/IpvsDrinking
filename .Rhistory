stroke_size = 0.5,
set_name_size = 10,
text_size = 5)
# Define los sets de proteínas detectadas en cada condición
set_IP <- prot.input$Protein.ID[prot.input[[paste0("counter.vv.", NameCond1)]] >= a]
set_DR <- prot.input$Protein.ID[prot.input[[paste0("counter.vv.", NameCond2)]] >= b]
# Crear lista con los dos sets
venn_data <- list(
IP = set_IP,
DR = set_DR
)
ggvenn(venn_data,
fill_color = c("lightblue", "salmon"),
stroke_size = 0.5,
set_name_size = 8,
text_size = 5)
venn_plot <- ggvenn(venn_data,
fill_color = c("lightblue", "salmon"),
stroke_size = 0.5,
set_name_size = 8,
text_size = 5) +
ggtitle("Diagrama de Venn de proteínas detectadas") +
labs(subtitle = "Comparación entre condiciones IP y DR",
caption = paste("Proteínas IP ≥", a, "y DR ≥", b)) +
theme(plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
plot.subtitle = element_text(hjust = 0.5, size = 12),
plot.caption = element_text(size = 10, face = "italic"))
# Mostrar el diagrama con texto adicional
print(venn_plot)
venn_plot <- ggvenn(venn_data,
fill_color = c("lightblue", "salmon"),
stroke_size = 0.5,
set_name_size = 8,
text_size = 5) +
ggtitle("Diagrama de Venn de proteínas detectadas") +
labs(subtitle = "Comparación entre condiciones IP y DR") +
# Añadir anotaciones debajo de cada área
annotate("text", x = -1.5, y = -0.5, label = "list3", size = 5, fontface = "italic") +       # IP
annotate("text", x =  1.5, y = -0.5, label = "list3.1", size = 5, fontface = "italic") +     # DR
annotate("text", x =  0, y =  0.8, label = "list1", size = 5, fontface = "bold") +           # Intersección
theme(plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
plot.subtitle = element_text(hjust = 0.5, size = 12))
# Mostrar el gráfico
print(venn_plot)
# Define los sets de proteínas detectadas en cada condición
set_IP <- prot.input$Protein.ID[prot.input[[paste0("counter.vv.", NameCond1)]] >= a]
set_DR <- prot.input$Protein.ID[prot.input[[paste0("counter.vv.", NameCond2)]] >= b]
venn_plot <- ggvenn(venn_data,
fill_color = c("lightblue", "salmon"),
stroke_size = 0.5,
set_name_size = 8,
text_size = 5) +
ggtitle("Venn diagram detected proteins") +
# Añadir anotaciones debajo de cada área
annotate("text", x = -1.5, y = -0.5, label = "list3", size = 7, fontface = "bold") +       # IP
annotate("text", x =  1.5, y = -0.5, label = "list3.1", size = 7, fontface = "bold") +     # DR
annotate("text", x =  0, y =  0.8, label = "list1", size = 7, fontface = "bold") +           # Intersección
theme(plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
plot.subtitle = element_text(hjust = 0.5, size = 12))
# Mostrar el gráfico
print(venn_plot)
venn_plot <- ggvenn(venn_data,
fill_color = c("lightblue", "salmon"),
stroke_size = 0.5,
set_name_size = 8,
text_size = 5) +
ggtitle("Venn diagram detected proteins") +
# Añadir anotaciones debajo de cada área
annotate("text", x = -1.5, y = -0.5, label = "list3", size = 7, fontface = "italic") +       # IP
annotate("text", x =  1.5, y = -0.5, label = "list3.1", size = 7, fontface = "italic") +     # DR
annotate("text", x =  0, y =  0.5, label = "list1", size = 7, fontface = "italic") +           # Intersección
theme(plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
plot.subtitle = element_text(hjust = 0.5, size = 12))
# Mostrar el gráfico
print(venn_plot)
venn_plot <- ggvenn(venn_data,
fill_color = c("lightblue", "salmon"),
stroke_size = 0.5,
set_name_size = 8,
text_size = 5) +
ggtitle("Venn diagram detected proteins") +
# Añadir anotaciones debajo de cada área
annotate("text", x = -1.2, y = -0.5, label = "list3", size = 7, fontface = "italic") +       # IP
annotate("text", x =  1.5, y = -0.5, label = "list3.1", size = 7, fontface = "italic") +     # DR
annotate("text", x =  0, y =  0.5, label = "list1", size = 7, fontface = "italic") +           # Intersección
theme(plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
plot.subtitle = element_text(hjust = 0.5, size = 12))
# Mostrar el gráfico
print(venn_plot)
venn_plot <- ggvenn(venn_data,
fill_color = c("lightblue", "salmon"),
stroke_size = 0.5,
set_name_size = 8,
text_size = 5) +
ggtitle("Venn diagram detected proteins") +
# Añadir anotaciones debajo de cada área
annotate("text", x = -1.2, y = -0.5, label = "list3", size = 7, fontface = "italic") +       # IP
annotate("text", x =  1.2, y = -0.5, label = "list3.1", size = 7, fontface = "italic") +     # DR
annotate("text", x =  0, y =  0.5, label = "list1", size = 7, fontface = "italic") +           # Intersección
theme(plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
plot.subtitle = element_text(hjust = 0.5, size = 12))
# Mostrar el gráfico
print(venn_plot)
venn_plot <- ggvenn(venn_data,
fill_color = c("lightblue", "salmon"),
stroke_size = 0.5,
set_name_size = 8,
text_size = 5) +
ggtitle("Venn diagram detected proteins") +
# Añadir anotaciones debajo de cada área
annotate("text", x = -1.2, y = -0.5, label = "list3", size = 7, fontface = "italic") +       # IP
annotate("text", x =  1.2, y = -0.5, label = "list3.1", size = 7, fontface = "italic") +     # DR
annotate("text", x =  0, y =  0.5, label = "list1", size = 7, fontface = "italic") +           # Intersección
theme(plot.title = element_text(hjust = 0.5, size = 16, face = "bold", margin = margin(b=20)),
plot.subtitle = element_text(hjust = 0.5, size = 12))
# Mostrar el gráfico
print(venn_plot)
head(prot.input)
# Count the rows for each category and condition
counts <- data.frame(
Category = c("Commons", "Uniques", "Uniques"),
Condition = c(paste0(NameCond1, "_", NameCond2), NameCond1, NameCond2),
Count = c(
nrow(get(paste0("commons.", NameCond1,"_",NameCond2))),
nrow(get(paste0("uniques.", NameCond1))),
nrow(get(paste0("uniques.", NameCond2)))
),
Word = c("List1", "List3", "List3.1")
)
# 1. Calcular los promedios de IP y DR
df_scatter <- prot.input %>%
rowwise() %>%
mutate(
mean_IP = mean(c_across(contains("_IP")), na.rm = TRUE),
mean_DR = mean(c_across(contains("_DR")), na.rm = TRUE)
) %>%
ungroup()
# 2. Scatterplot de IP vs DR
ggplot(df_scatter, aes(x = mean_IP, y = mean_DR)) +
geom_point(color = "#1f77b4", size = 2) +
theme_minimal() +
labs(
title = "Scatterplot: Proteínas IP vs DR",
x = "Mean IP intensity",
y = "Mean DR intensity"
) +
geom_abline(slope = 1, intercept = 0, linetype = "dashed", color = "gray50")
# 1. Calcular los promedios de IP y DR
df_scatter <- prot.input %>%
rowwise() %>%
mutate(
mean_IP = mean(c_across(contains("_IP")), na.rm = TRUE),
mean_DR = mean(c_across(contains("_DR")), na.rm = TRUE)
) %>%
ungroup()
# 2. Scatterplot de IP vs DR
# 2. Scatterplot de IP vs DR con ejes definidos y sin grid
ggplot(df_scatter, aes(x = mean_IP, y = mean_DR)) +
geom_point(color = "#1f77b4", size = 2) +
labs(
title = "Scatterplot: Proteínas IP vs DR",
x = "Mean IP intensity",
y = "Mean DR intensity"
) +
geom_abline(slope = 1, intercept = 0, linetype = "dashed", color = "gray50") +
theme(
panel.background = element_blank(),
panel.grid = element_blank(),
axis.line = element_line(color = "black"),
axis.ticks = element_line(color = "black"),
axis.text = element_text(color = "black")
) +
expand_limits(x = 0, y = 0)
# 1. Calcular los promedios de IP y DR
df_scatter <- df %>%
rowwise() %>%
mutate(
mean_IP = mean(c_across(contains("_IP")), na.rm = TRUE),
mean_DR = mean(c_across(contains("_DR")), na.rm = TRUE)
) %>%
ungroup() %>%
mutate(cond_label = case_when(
!is.na(mean_IP) & is.na(mean_DR) ~ "IP only",
is.na(mean_IP) & !is.na(mean_DR) ~ "DR only",
!is.na(mean_IP) & !is.na(mean_DR) ~ "Both",
TRUE ~ NA_character_
))
# 1. Calcular los promedios de IP y DR
df_scatter <- df %>%
rowwise() %>%
mutate(
mean_IP = mean(c_across(contains("_IP")), na.rm = TRUE),
mean_DR = mean(c_across(contains("_DR")), na.rm = TRUE)
) %>%
ungroup()
# 2. Scatterplot de IP vs DR con ejes definidos, sin grid, puntos redondeados y mismo color para todos
ggplot(df_scatter, aes(x = mean_IP, y = mean_DR)) +
geom_point(size = 3, shape = 21, fill = "#1f77b4", color = "black", stroke = 0.3) +
labs(
title = "Scatterplot: Proteínas IP vs DR",
x = "Mean IP intensity",
y = "Mean DR intensity"
) +
geom_abline(slope = 1, intercept = 0, linetype = "dashed", color = "gray50") +
theme(
panel.background = element_blank(),
panel.grid = element_blank(),
axis.line = element_line(color = "black"),
axis.ticks = element_line(color = "black"),
axis.text = element_text(color = "black")
) +
expand_limits(x = 0, y = 0)
# 2. Scatterplot de IP vs DR con ejes definidos, sin grid, puntos redondeados y mismo color para todos
ggplot(df_scatter, aes(x = mean_IP, y = mean_DR)) +
geom_point(size = 3, shape = 21, fill = "#1f77b4", stroke = 0.3) +
labs(
title = "Scatterplot: Proteínas IP vs DR",
x = "Mean IP intensity",
y = "Mean DR intensity"
) +
geom_abline(slope = 1, intercept = 0, linetype = "dashed", color = "gray50") +
theme(
panel.background = element_blank(),
panel.grid = element_blank(),
axis.line = element_line(color = "black"),
axis.ticks = element_line(color = "black"),
axis.text = element_text(color = "black")
) +
expand_limits(x = 0, y = 0)
# 2. Scatterplot de IP vs DR con ejes definidos, sin grid, puntos redondeados y mismo color para todos
scatter <-  ggplot(df_scatter, aes(x = mean_IP, y = mean_DR)) +
geom_point(size = 3, shape = 21, fill = "#1f77b4", stroke = 0.3) +
labs(
title = "Scatterplot: IP vs DR",
x = "Mean IP intensity",
y = "Mean DR intensity"
) +
geom_abline(slope = 1, intercept = 0, linetype = "dashed", color = "gray50") +
theme(
panel.background = element_blank(),
panel.grid = element_blank(),
axis.line = element_line(color = "black"),
axis.ticks = element_line(color = "black"),
axis.text = element_text(color = "black")
) +
expand_limits(x = 0, y = 0)
print(scatter)
# 1. Calcular medias para IP (columnas que contienen "_IP")
mean_list2   <- list2   %>% rowwise() %>% mutate(mean = mean(c_across(contains("_IP")), na.rm = TRUE)) %>% pull(mean) %>% mean(na.rm = TRUE)
# 1. Calcular medias para IP (columnas que contienen "_IP")
mean_list2   <- list2.Fc1.5   %>% rowwise() %>% mutate(mean = mean(c_across(contains("_IP")), na.rm = TRUE)) %>% pull(mean) %>% mean(na.rm = TRUE)
mean_list3   <- list3   %>% rowwise() %>% mutate(mean = mean(c_across(contains("_IP")), na.rm = TRUE)) %>% pull(mean) %>% mean(na.rm = TRUE)
mean_list4   <- list4   %>% rowwise() %>% mutate(mean = mean(c_across(contains("_IP")), na.rm = TRUE)) %>% pull(mean) %>% mean(na.rm = TRUE)
# List 4: IP Proteome
list4 <- rbind(list2.Fc1.5, list3)
write_xlsx(list4, path = file.path(FolderList, paste0("List4_", NameCond1, ".xlsx")))
# List 4.1: DR Proteome
list4.1 <- rbind(list2.1Fc1.5, list3.1)
write_xlsx(list4.1, path = file.path(FolderList, paste0("List4.1_", NameCond2, ".xlsx")))
# 1. Calcular medias para IP (columnas que contienen "_IP")
mean_list2   <- list2.Fc1.5   %>% rowwise() %>% mutate(mean = mean(c_across(contains("_IP")), na.rm = TRUE)) %>% pull(mean) %>% mean(na.rm = TRUE)
mean_list3   <- list3   %>% rowwise() %>% mutate(mean = mean(c_across(contains("_IP")), na.rm = TRUE)) %>% pull(mean) %>% mean(na.rm = TRUE)
mean_list4   <- list4   %>% rowwise() %>% mutate(mean = mean(c_across(contains("_IP")), na.rm = TRUE)) %>% pull(mean) %>% mean(na.rm = TRUE)
# 2. Calcular medias para DR (columnas que contienen "_DR")
mean_list2.1 <- list2.1Fc1.5 %>% rowwise() %>% mutate(mean = mean(c_across(contains("_DR")), na.rm = TRUE)) %>% pull(mean) %>% mean(na.rm = TRUE)
mean_list3.1 <- list3.1 %>% rowwise() %>% mutate(mean = mean(c_across(contains("_DR")), na.rm = TRUE)) %>% pull(mean) %>% mean(na.rm = TRUE)
mean_list4.1 <- list4.1 %>% rowwise() %>% mutate(mean = mean(c_across(contains("_DR")), na.rm = TRUE)) %>% pull(mean) %>% mean(na.rm = TRUE)
# 3. Crear dataframe resumen para graficar
bar_data <- data.frame(
grupo = c("list2", "list3", "list4", "list2.1", "list3.1", "list4.1"),
condicion = c("IP", "IP", "IP", "DR", "DR", "DR"),
media = c(mean_list2, mean_list3, mean_list4, mean_list2.1, mean_list3.1, mean_list4.1)
)
# 4. Crear gráfico de barras
ggplot(bar_data, aes(x = grupo, y = media, fill = condicion)) +
geom_bar(stat = "identity", position = position_dodge()) +
scale_fill_manual(values = c("IP" = "#1f77b4", "DR" = "#ff7f0e")) +
theme_minimal() +
labs(
title = "Intensidades medias por grupo",
x = "Grupo",
y = "Intensidad media",
fill = "Condición"
)
# Crear dataframe para el plot
bar_data <- data.frame(
grupo = factor(c("list2", "list3", "list4", "list2.1", "list3.1", "list4.1"),
levels = c("list2", "list3", "list4", "list2.1", "list3.1", "list4.1")),  # orden fijo
condicion = c("IP", "IP", "IP", "DR", "DR", "DR"),
media = c(mean_list2, mean_list3, mean_list4, mean_list2.1, mean_list3.1, mean_list4.1)
)
# Gráfico de barras agrupado
ggplot(bar_data, aes(x = grupo, y = media, fill = condicion)) +
geom_bar(stat = "identity") +
scale_fill_manual(values = c("IP" = "#1f77b4", "DR" = "#ff7f0e")) +
theme_minimal() +
labs(
title = "Intensidades medias por grupo",
x = "Grupo",
y = "Intensidad media",
fill = "Condición"
) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Gráfico de barras agrupado sin grid y con ejes bien marcados
ggplot(bar_data, aes(x = grupo, y = media, fill = condicion)) +
geom_bar(stat = "identity") +
scale_fill_manual(values = c("IP" = "#1f77b4", "DR" = "#ff7f0e")) +
labs(
title = "Intensidades medias por grupo",
x = "Grupo",
y = "Intensidad media",
fill = "Condición"
) +
theme(
panel.background = element_blank(),
panel.grid = element_blank(),
axis.line = element_line(color = "black"),
axis.ticks = element_line(color = "black"),
axis.text = element_text(color = "black"),
axis.text.x = element_text(angle = 45, hjust = 1)
)
source("C:/Users/rodri/Git_Repositories/IpvsDrinking/src/scripts/1_MS-DAP1 Pipeline_1.R", echo=TRUE)
source("C:/Users/rodri/Git_Repositories/IpvsDrinking/src/scripts/Instructions_MS-DAP1 Defining Variables and Instructions_Template.R", echo=TRUE)
source("C:/Users/rodri/Git_Repositories/IpvsDrinking/src/scripts/2_MS-DAP_DownstreamAnalisys_IPvsDR.R", echo=TRUE)
source("C:/Users/rodri/Git_Repositories/IpvsDrinking/src/scripts/Instructions_MS-DAP1 Defining Variables and Instructions_Template.R", echo=TRUE)
source("C:/Users/rodri/Git_Repositories/IpvsDrinking/src/scripts/2_MS-DAP_DownstreamAnalisys_IPvsDR.R", echo=TRUE)
# 1. Calcular medias para IP (columnas que contienen "_IP")
mean_list2   <- list2.Fc1.5   %>% rowwise() %>% mutate(mean = mean(c_across(contains("_IP")), na.rm = TRUE)) %>% pull(mean) %>% mean(na.rm = TRUE)
mean_list3   <- list3   %>% rowwise() %>% mutate(mean = mean(c_across(contains("_IP")), na.rm = TRUE)) %>% pull(mean) %>% mean(na.rm = TRUE)
mean_list4   <- list4   %>% rowwise() %>% mutate(mean = mean(c_across(contains("_IP")), na.rm = TRUE)) %>% pull(mean) %>% mean(na.rm = TRUE)
# 2. Calcular medias para DR (columnas que contienen "_DR")
mean_list2.1 <- list2.1Fc1.5 %>% rowwise() %>% mutate(mean = mean(c_across(contains("_DR")), na.rm = TRUE)) %>% pull(mean) %>% mean(na.rm = TRUE)
mean_list3.1 <- list3.1 %>% rowwise() %>% mutate(mean = mean(c_across(contains("_DR")), na.rm = TRUE)) %>% pull(mean) %>% mean(na.rm = TRUE)
mean_list4.1 <- list4.1 %>% rowwise() %>% mutate(mean = mean(c_across(contains("_DR")), na.rm = TRUE)) %>% pull(mean) %>% mean(na.rm = TRUE)
source("C:/Users/rodri/Git_Repositories/IpvsDrinking/src/scripts/Instructions_MS-DAP1 Defining Variables and Instructions_Template.R", echo=TRUE)
######### I. Define General ########
#Set these variables
#Set working directory, folder names, and file names for data and metadata
setwd("C:/Users/rodri/Git_Repositories/IpvsDrinking")
FolderName<-"src/data/" #folder name with / at the end
FolderList <-"src/data/protein_lists/"
diann_data<-"src/data/raw_data/20250320_search2.parquet"
FASTA<-"src/data/metadata_fasta/MOUSE_UP000000589_10090_20241002.fasta"
Metadata<-"src/data/metadata_fasta/samplemetadata.xlsx"
#uncomment if using spectronaut
#Set inputs: names and group
NameCond1<- "IP"#generally minus; comes first in table; second in contrast (ex. + in +vs- contrast)
NameCond2<- "DR" #generally plus; comes second in table; first in contrast and in first contrast with NC
NameControl<- "Ctrl" #generally control; comes last in table
# contrast1<-"+" #usually +=1 and -=2
# contrast2<-"-"
# contrast3<-"NC"
# SampleGroup<-"7Nex"
#Set numbers of variables
cond1<-2 #minus; comes first in table
cond2<-2 #plus; comes second in table
control<-1 #control; comes last in table
#Set number of replicates to look in
#ex. look in a out of cond1 samples (5 out of 6)
a<-cond1-1
b<-cond2-1
c<-control-1
#Set cutoffs
pval<-0.05
qval<-0.05
foldlog2<-1.5
#run MS-DAP1 Pipeline_1 script and then return to II
#### II. MSDAP 1 variables#####
#Set these variables
#MS-DAP1 downstream Analysis: uncomment line 37 if need to change where controls are to the end
#Don't forget to open libraries at the top of MS-DAP1 downstream Analysis
#Set time stamp of MS-DAP1 output
DateTimeStamp<-"2025-04-08_17-10-05" #fill in after running MSDAP1
#Set Column assignments from full prot.input
#(run lines 14-27 in downstream analysis and check which columns are your samples)
# 1.5 Nex 4:19
# 3 Nex 16:31
# 7 Nex 45:57
col.start<-4
col.end<-8
##Don't change below; these are the dynamic labels
foldchange.colNam1<-paste0("foldchange.log2.",NameCond2,".",NameControl)
pvalue.colNam1<-paste0("pvalue.log2.",NameCond2,".",NameControl)
qvalue.colNam1<-paste0("qvalue.log2.",NameCond2,".",NameControl)
foldchange.colNam2<-paste0("foldchange.log2.",NameCond1,".",NameControl)
pvalue.colNam2<-paste0("pvalue.log2.",NameCond1,".",NameControl)
qvalue.colNam2<-paste0("qvalue.log2.",NameCond1,".",NameControl)
#Column assignments after selecting columns and making labels automated
total<-cond1+cond2+control
prot.col.end<-total+3
col.start.cond1<-4
col.end.cond1<-cond1+3
col.start.cond2<-cond1+3+1
col.end.cond2<-cond1+cond2+3
col.start.ctrl<-cond1+cond2+3+1
#Run MS-DAP1 downstream Analysis_2
#Run Filtering_3
#Return to III
####III MSDAP 2####
#Set this
# filt.type<-"both"
#Run MS-DAP2 Pipeline_4
#Set these
DateTimeStamp2<-"2025-04-08_17-10-05"
#Uncomment these to run if not running code all at once (ex. if ran MS-DAP1 day before and restarted r before running MS-DAP2 downstream)
#Set Column assignments from full prot.input, use same as above for msdap1
# col.start<-4
# col.end<-19
foldchange.colNam<-paste0("foldchange.log2.",NameCond1,".",NameCond2)
foldchange2.colNam<-paste0("foldchange.log2.",NameCond1,".",NameCond2)
pvalue.colNam<-paste0("pvalue.log2.",NameCond2,".",NameCond1)
qvalue.colNam<-paste0("qvalue.log2.",NameCond2,".",NameCond1)
#MS-DAP2 downstream Analysis: uncomment line 33 if need to change where controls are to the end
#Run MS-DAP2 Downstream Analysis_5
#Continue with optional (6) generating boxplots of candidates or end after MSDAP2 Downstream Analysis
# GO Analisys
source("C:/Users/rodri/Git_Repositories/IpvsDrinking/src/scripts/2_MS-DAP_DownstreamAnalisys_IPvsDR.R", echo=TRUE)
class(list2)
class(list3)
class(list4)
class(list2.1Fc1.5)
class(list3)
class(list4)
class(list2.Fc1.5)
class(list3)
class(list4)
source("C:/Users/rodri/Git_Repositories/IpvsDrinking/src/scripts/Instructions_MS-DAP1 Defining Variables and Instructions_Template.R", echo=TRUE)
source("C:/Users/rodri/Git_Repositories/IpvsDrinking/src/scripts/2_MS-DAP_DownstreamAnalisys_IPvsDR.R", echo=TRUE)
#-------------------------------------------------------------------------------------------------------------
# 1. Calcular los promedios de IP y DR
df_scatter <- prot.input %>%
rowwise() %>%
mutate(
mean_IP = mean(c_across(contains("_IP")), na.rm = TRUE),
mean_DR = mean(c_across(contains("_DR")), na.rm = TRUE)
) %>%
ungroup()
source("C:/Users/rodri/Git_Repositories/IpvsDrinking/src/scripts/Instructions_MS-DAP1 Defining Variables and Instructions_Template.R", echo=TRUE)
source("C:/Users/rodri/Git_Repositories/IpvsDrinking/src/scripts/2_MS-DAP_DownstreamAnalisys_IPvsDR.R", echo=TRUE)
source("C:/Users/rodri/Git_Repositories/IpvsDrinking/src/scripts/Instructions_MS-DAP1 Defining Variables and Instructions_Template.R", echo=TRUE)
ggsave(paste0(Folderfig,"/PCA.png"), PCAplot = mi_plot, width = 8, height = 6, dpi = 300)
ggsave(paste0(Folderfig,"/PCA.png"), plot = PCAplot, width = 8, height = 6, dpi = 300)
ggsave(paste0(Folderfig,"/protein_intensity_samples.png"), plot = Groupsplot, width = 8, height = 6, dpi = 300)
### boxplot of intensties
par(mar = c(5, 4, 1, 2), cex.main = 0.9, mfrow = c(1,1), cex.axis = 0.9)
boxplot(prot[,col.start.cond1:prot.col.end],
las = 2,
col = c(rep("#DCCB4E" ,cond1), rep("#E98905",cond2), rep("#3A9AB2",control)), #change these to match number of replicates
pch = 20,
ylab = "log2 protein intensity")
### boxplot of intensties
par(mar = c(5, 4, 1, 2), cex.main = 0.9, mfrow = c(1,1), cex.axis = 0.9)
a <- boxplot(prot[,col.start.cond1:prot.col.end],
las = 2,
col = c(rep("#DCCB4E" ,cond1), rep("#E98905",cond2), rep("#3A9AB2",control)), #change these to match number of replicates
pch = 20,
ylab = "log2 protein intensity")
Intensitiesplot<-a
# barplot of IDs in GGPlot stylw
tmp <- data.frame(
name=colnames(prot[,col.start.cond1:prot.col.end]) ,  #change columns to match sample numbers
value=prot_count)
b <- ggplot(tmp, aes(x=name, y=value)) +
geom_bar(stat = "identity", colour = "black", fill = c(rep("#DCCB4E" ,cond1), rep("#E98905",cond2), rep("#3A9AB2",control))) +
scale_x_discrete(limits=colnames(prot.input[,col.start.cond1:prot.col.end]))+                                                            #change numbers
theme_classic()+ theme(legend.position = "none", axis.text=element_text(colour="black")) +
ggtitle("")+
ylab("protein groups") + xlab("") + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
Groupsplot<-b
ggsave(paste0(Folderfig,"/protein_intensity_samples.png"), plot = Groupsplot, width = 8, height = 6, dpi = 300)
#-------------------------------------------------------------------------------------------------------------
# Filter the most enriched proteins from both sides
enriched_proteins <- get(paste0("dea.", NameCond2, "vs", NameCond1)) %>%
dplyr::filter(get(pvalue.colNam) <= pval &
(get(foldchange.colNam) >= log2(foldlog2) |
get(foldchange.colNam) <= -log2(foldlog2))) %>%
dplyr::mutate(abs_foldchange = abs(get(foldchange.colNam))) %>%
dplyr::arrange(desc(abs_foldchange)) %>%
dplyr::group_by(sign = ifelse(get(foldchange.colNam) >= 0, "IP", "DR")) %>%
dplyr::slice_head(n = 10) %>%  # Seleccionar los 10 principales
dplyr::ungroup()
source("C:/Users/rodri/Git_Repositories/IpvsDrinking/src/scripts/Instructions_MS-DAP1 Defining Variables and Instructions_Template.R", echo=TRUE)
source("C:/Users/rodri/Git_Repositories/IpvsDrinking/src/scripts/2_MS-DAP_DownstreamAnalisys_IPvsDR.R", echo=TRUE)
source("C:/Users/rodri/Git_Repositories/IpvsDrinking/src/scripts/Instructions_MS-DAP1 Defining Variables and Instructions_Template.R", echo=TRUE)
source("C:/Users/rodri/Git_Repositories/IpvsDrinking/src/scripts/2_MS-DAP_DownstreamAnalisys_IPvsDR.R", echo=TRUE)
class(a)
View(a)
### boxplot of intensties
png(filename = paste0(Folderfig, "/protein_intensity_samples1.png"), width = 800, height = 600)
par(mar = c(5, 4, 1, 2), cex.main = 0.9, mfrow = c(1,1), cex.axis = 0.9)
boxplot(prot[,col.start.cond1:prot.col.end],
las = 2,
col = c(rep("#DCCB4E" ,cond1), rep("#E98905",cond2), rep("#3A9AB2",control)), #change these to match number of replicates
pch = 20,
ylab = "log2 protein intensity")
Intensitiesplot<-recordPlot()
dev.off()
source("C:/Users/rodri/Git_Repositories/IpvsDrinking/src/scripts/Instructions_MS-DAP1 Defining Variables and Instructions_Template.R", echo=TRUE)
source("C:/Users/rodri/Git_Repositories/IpvsDrinking/src/scripts/2_MS-DAP_DownstreamAnalisys_IPvsDR.R", echo=TRUE)
source("C:/Users/rodri/Git_Repositories/IpvsDrinking/src/scripts/Instructions_MS-DAP1 Defining Variables and Instructions_Template.R", echo=TRUE)
source("C:/Users/rodri/Git_Repositories/IpvsDrinking/src/scripts/2_MS-DAP_DownstreamAnalisys_IPvsDR.R", echo=TRUE)
source("C:/Users/rodri/Git_Repositories/IpvsDrinking/src/scripts/Instructions_MS-DAP1 Defining Variables and Instructions_Template.R", echo=TRUE)
source("C:/Users/rodri/Git_Repositories/IpvsDrinking/src/scripts/2_MS-DAP_DownstreamAnalisys_IPvsDR.R", echo=TRUE)
source("C:/Users/rodri/Git_Repositories/IpvsDrinking/src/scripts/Instructions_MS-DAP1 Defining Variables and Instructions_Template.R", echo=TRUE)
source("C:/Users/rodri/Git_Repositories/IpvsDrinking/src/scripts/2_MS-DAP_DownstreamAnalisys_IPvsDR.R", echo=TRUE)
source("C:/Users/rodri/Git_Repositories/IpvsDrinking/src/scripts/Instructions_MS-DAP1 Defining Variables and Instructions_Template.R", echo=TRUE)
source("C:/Users/rodri/Git_Repositories/IpvsDrinking/src/scripts/2_MS-DAP_DownstreamAnalisys_IPvsDR.R", echo=TRUE)
dev.off()
source("C:/Users/rodri/Git_Repositories/IpvsDrinking/src/scripts/Instructions_MS-DAP1 Defining Variables and Instructions_Template.R", echo=TRUE)
source("C:/Users/rodri/Git_Repositories/IpvsDrinking/src/scripts/2_MS-DAP_DownstreamAnalisys_IPvsDR.R", echo=TRUE)
source("C:/Users/rodri/Git_Repositories/IpvsDrinking/src/scripts/Instructions_MS-DAP1 Defining Variables and Instructions_Template.R", echo=TRUE)
source("C:/Users/rodri/Git_Repositories/IpvsDrinking/src/scripts/2_MS-DAP_DownstreamAnalisys_IPvsDR.R", echo=TRUE)
