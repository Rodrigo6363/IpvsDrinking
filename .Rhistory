library(msdap)
install.packages("msqrob2")
install.packages("devtools")
install.packages("msdap")
version
install.packages("devtools")
devtools::install_github("msdap/msdap")
version
install.packages("Rtools")
install.packages("msdap")
install.packages(c("devtools", "tidyverse", "tinytex", "BiocManager"))
tinytex::install_tinytex()
BiocManager::install(c('ProtGenerics', 'MSnbase', 'limma'), update=T, ask=F)
Sys.setenv(R_REMOTES_NO_ERRORS_FROM_WARNINGS="true")
devtools::install_github("ftwkoopmans/msdap", upgrade = "never") #
R.Version()
R.Version()
R.Version()
remove.packages("msdap")
devtools::install_github("MS-DAP/msdap")
remotes::install_github("MS-DAP/msdap")
install.packages("remotes")
remotes::install_github("ftwkoopmans/msdap")
pkgbuild::check_build_tools(debug = TRUE)
pkgbuild::check_build_tools(debug = TRUE)
remotes::install_github("ftwkoopmans/msdap")
git remote add origin https://github.com/Rodrigo6363/IPvsDrinking.git
proteins_minus_mHtt <- select(proteins_minus_mHtt, -"accessions", -paste0("counter.vv.",NameCond2), -paste0("counter.vv.",NameCond1),
-paste0(foldchange.colNam), -paste0(pvalue.colNam), -paste0(qvalue.colNam))
source("C:/Users/rodri/Git_Repositories/IpvsDrinking/src/scripts/Instructions_MS-DAP1 Defining Variables and Instructions_Template.R", echo=TRUE)
source("C:/Users/rodri/Git_Repositories/IpvsDrinking/src/scripts/2_MS-DAP_DownstreamAnalisys_IPvsDR.R", echo=TRUE)
colnames(prot.input)
#----------------------------------------------------------------------------------------------------------
library(tidyverse)
# Convertir a formato largo
datos_largos <- prot.input %>%
pivot_longer(cols = c(`1_IP`, `2_IP`, `3_DR`, `4_DR`),
names_to = "Muestra",
values_to = "Intensidad") %>%
mutate(Condicion = case_when(
str_detect(Muestra, "IP") ~ "IP",
str_detect(Muestra, "DR") ~ "DR"
))
# Colores personalizados
colores <- c("IP" = "#d8b500", "DR" = "#ea782c")
# Gráfico estilo figura D
ggplot(datos_largos, aes(x = Condicion, y = Intensidad, fill = Condicion)) +
geom_boxplot(width = 0.5, outlier.shape = 21, outlier.size = 2, color = "black", alpha = 0.6) +
scale_fill_manual(values = colores) +
labs(y = expression("Mean log"[2]*" Protein Intensity"), x = NULL) +
theme_minimal(base_size = 14) +
theme(
legend.position = "none",
axis.text.x = element_text(size = 12, face = "bold"),
axis.text.y = element_text(size = 12),
axis.title.y = element_text(size = 14)
) +
geom_text(data = datos_largos %>%
group_by(Condicion) %>%
summarise(n = n(), .groups = 'drop'),
aes(x = Condicion, y = max(datos_largos$Intensidad, na.rm = TRUE) + 1,
label = format(n, big.mark = ",")),
fontface = "italic", size = 5)
# Convertir a formato largo
datos_largos <- prot.input %>%
pivot_longer(cols = c(`1_IP`, `2_IP`, `3_DR`, `4_DR`),
names_to = "Muestra",
values_to = "Intensidad") %>%
mutate(Condicion = case_when(
str_detect(Muestra, "IP") ~ "IP",
str_detect(Muestra, "DR") ~ "DR"
))
# Colores personalizados
colores <- c("IP" = "#d8b500", "DR" = "#ea782c")
# Gráfico personalizado
ggplot(datos_largos, aes(x = Condicion, y = Intensidad, color = Condicion)) +
geom_boxplot(
fill = NA,                      # Sin relleno
outlier.shape = 16,             # Puntos sólidos
outlier.size = 2,
outlier.color = NA,             # Quitamos el color por defecto
width = 0.5,
size = 1.2                      # Grosor de contorno y bigotes
) +
# Agregamos los outliers como puntos aparte con el color deseado
geom_jitter(width = 0.15, size = 1.5, alpha = 0.4) +
scale_color_manual(values = colores) +
labs(y = expression("Mean log"[2]*" Protein Intensity"), x = NULL) +
theme_classic(base_size = 14) +  # Sin grid, ejes limpios
theme(
legend.position = "none",
axis.line = element_line(size = 0.8),  # Ejes marcados
axis.text.x = element_text(size = 12, face = "bold"),
axis.text.y = element_text(size = 12),
axis.title.y = element_text(size = 14)
) +
# Añadir texto con el número de puntos por grupo
geom_text(data = datos_largos %>%
group_by(Condicion) %>%
summarise(n = n(), .groups = 'drop'),
aes(x = Condicion, y = max(datos_largos$Intensidad, na.rm = TRUE) + 1,
label = format(n, big.mark = ",")),
fontface = "italic", size = 5)
# Convertir a formato largo
datos_largos <- prot.input %>%
pivot_longer(cols = c(`1_IP`, `2_IP`, `3_DR`, `4_DR`),
names_to = "Muestra",
values_to = "Intensidad") %>%
mutate(Condicion = case_when(
str_detect(Muestra, "IP") ~ "IP",
str_detect(Muestra, "DR") ~ "DR"
))
# Colores personalizados
colores <- c("IP" = "#d8b500", "DR" = "#ea782c")
# Gráfico personalizado
ggplot(datos_largos, aes(x = Condicion, y = Intensidad, color = Condicion)) +
geom_boxplot(
fill = NA,                      # Sin relleno
outlier.shape = 16,             # Puntos sólidos
outlier.size = 2,
outlier.color = NA,             # Quitamos el color por defecto
width = 0.5,
size = 1.2                      # Grosor de contorno y bigotes
) +
# Agregamos los outliers como puntos aparte con el color deseado
geom_jitter(width = 0.15, size = 1.5, alpha = 0.4) +
scale_color_manual(values = colores) +
labs(y = expression("Mean log"[2]*" Protein Intensity"), x = NULL) +
theme_classic(base_size = 14) +  # Sin grid, ejes limpios
theme(
legend.position = "none",
axis.line = element_line(size = 0.8),  # Ejes marcados
axis.text.x = element_text(size = 12, face = "bold"),
axis.text.y = element_text(size = 12),
axis.title.y = element_text(size = 14)
) +
# Añadir texto con el número de puntos por grupo
geom_text(data = datos_largos %>%
group_by(Condicion) %>%
summarise(n = n(), .groups = 'drop'),
aes(x = Condicion, y = max(datos_largos$Intensidad, na.rm = TRUE) + 1,
label = format(n, big.mark = ",")),
fontface = "italic", size = 5)
# Gráfico sin outliers
ggplot(datos_largos, aes(x = Condicion, y = Intensidad, color = Condicion)) +
geom_boxplot(
fill = NA,            # Sin relleno
outlier.shape = NA,   # No mostrar outliers
width = 0.5,
size = 1.2            # Grosor de contorno y bigotes
) +
scale_color_manual(values = colores) +
labs(y = expression("Mean log"[2]*" Protein Intensity"), x = NULL) +
theme_classic(base_size = 14) +  # Sin grid
theme(
legend.position = "none",
axis.line = element_line(size = 0.8),
axis.text.x = element_text(size = 12, face = "bold"),
axis.text.y = element_text(size = 12),
axis.title.y = element_text(size = 14)
) +
geom_text(data = datos_largos %>%
group_by(Condicion) %>%
summarise(n = n(), .groups = 'drop'),
aes(x = Condicion, y = max(datos_largos$Intensidad, na.rm = TRUE) + 1,
label = format(n, big.mark = ",")),
fontface = "italic", size = 5)
# Gráfico con outliers
ggplot(datos_largos, aes(x = Condicion, y = Intensidad, color = Condicion)) +
geom_boxplot(
fill = NA,            # Sin relleno en las cajas
outlier.shape = 16,   # Puntos sólidos
outlier.size = 2,
width = 0.5,
size = 1.2            # Grosor de contorno y bigotes
) +
scale_color_manual(values = colores) +
labs(y = expression("Mean log"[2]*" Protein Intensity"), x = NULL) +
theme_classic(base_size = 14) +
theme(
legend.position = "none",
axis.line = element_line(size = 0.8),
axis.text.x = element_text(size = 12, face = "bold"),
axis.text.y = element_text(size = 12),
axis.title.y = element_text(size = 14)
) +
geom_text(data = datos_largos %>%
group_by(Condicion) %>%
summarise(n = n(), .groups = 'drop'),
aes(x = Condicion, y = max(datos_largos$Intensidad, na.rm = TRUE) + 1,
label = format(n, big.mark = ",")),
fontface = "italic", size = 5)
# Gráfico con outliers
ggplot(datos_largos, aes(x = Condicion, y = Intensidad, color = Condicion)) +
geom_boxplot(
fill = NA,            # Sin relleno en las cajas
outlier.shape = 16,   # Puntos sólidos
outlier.size = 2,
width = 0.25,
size = 1.2            # Grosor de contorno y bigotes
) +
scale_color_manual(values = colores) +
labs(y = expression("Mean log"[2]*" Protein Intensity"), x = NULL) +
theme_classic(base_size = 14) +
theme(
legend.position = "none",
axis.line = element_line(size = 0.8),
axis.text.x = element_text(size = 12, face = "bold"),
axis.text.y = element_text(size = 12),
axis.title.y = element_text(size = 14)
) +
geom_text(data = datos_largos %>%
group_by(Condicion) %>%
summarise(n = n(), .groups = 'drop'),
aes(x = Condicion, y = max(datos_largos$Intensidad, na.rm = TRUE) + 1,
label = format(n, big.mark = ",")),
fontface = "italic", size = 5)
# Paso 1: contar protein groups identificados en ambas réplicas por condición
conteos <- tibble(
Condicion = c("IP", "DR"),
n = c(
prot.input %>% filter(counter.vv.IP == 2) %>% nrow(),
prot.input %>% filter(counter.vv.DR == 2) %>% nrow()
)
)
# Paso 2: convertir a formato largo para el boxplot
datos_largos <- prot.input %>%
pivot_longer(cols = c(`1_IP`, `2_IP`, `3_DR`, `4_DR`),
names_to = "Muestra",
values_to = "Intensidad") %>%
mutate(Condicion = case_when(
str_detect(Muestra, "IP") ~ "IP",
str_detect(Muestra, "DR") ~ "DR"
))
# Colores personalizados
colores <- c("IP" = "#d8b500", "DR" = "#ea782c")
# Gráfico final
ggplot(datos_largos, aes(x = Condicion, y = Intensidad, color = Condicion)) +
geom_boxplot(
fill = NA,
outlier.shape = 16,
outlier.size = 2,
width = 0.25,
size = 1.2
) +
scale_color_manual(values = colores) +
labs(y = expression("Mean log"[2]*" Protein Intensity"), x = NULL) +
theme_classic(base_size = 14) +
theme(
legend.position = "none",
axis.line = element_line(size = 0.8),
axis.text.x = element_text(size = 12, face = "bold"),
axis.text.y = element_text(size = 12),
axis.title.y = element_text(size = 14)
) +
geom_text(data = conteos,
aes(x = Condicion, y = max(datos_largos$Intensidad, na.rm = TRUE) + 1,
label = format(n, big.mark = ",")),
fontface = "italic", size = 5)
source("C:/Users/rodri/Git_Repositories/IpvsDrinking/src/scripts/Instructions_MS-DAP1 Defining Variables and Instructions_Template.R", echo=TRUE)
source("C:/Users/rodri/Git_Repositories/IpvsDrinking/src/scripts/2_MS-DAP_DownstreamAnalisys_IPvsDR.R", echo=TRUE)
source("C:/Users/rodri/Git_Repositories/IpvsDrinking/src/scripts/Instructions_MS-DAP1 Defining Variables and Instructions_Template.R", echo=TRUE)
source("C:/Users/rodri/Git_Repositories/IpvsDrinking/src/scripts/2_MS-DAP_DownstreamAnalisys_IPvsDR.R", echo=TRUE)
View(prot.input)
# 1. Calcular los promedios de IP y DR
df_scatter <- prot.input %>%
rowwise() %>%
mutate(
mean_IP = mean(c_across(contains("_IP")), na.rm = TRUE),
mean_DR = mean(c_across(contains("_DR")), na.rm = TRUE)
) %>%
ungroup()
# 2. Scatterplot de IP vs DR con ejes definidos, sin grid, puntos redondeados y mismo color para todos
scatter <-  ggplot(df_scatter, aes(x = mean_IP, y = mean_DR)) +
geom_point(size = 3, shape = 21, fill = "#1f77b4", stroke = 0.3) +
labs(
title = "Scatterplot: IP vs DR",
x = "Mean IP intensity",
y = "Mean DR intensity"
) +
geom_abline(slope = 1, intercept = 0, linetype = "dashed", color = "gray50") +
theme(
panel.background = element_blank(),
panel.grid = element_blank(),
axis.line = element_line(color = "black"),
axis.ticks = element_line(color = "black"),
axis.text = element_text(color = "black")
) +
expand_limits(x = 0, y = 0)
print(scatter)
source("C:/Users/rodri/Git_Repositories/IpvsDrinking/src/scripts/Instructions_MS-DAP1 Defining Variables and Instructions_Template.R", echo=TRUE)
source("C:/Users/rodri/Git_Repositories/IpvsDrinking/src/scripts/2_MS-DAP_DownstreamAnalisys_IPvsDR.R", echo=TRUE)
# Create the plot without the 'NA' category in the legend
C <- ggplot(data = data_clean,
aes(x = get(foldchange.colNam),
y = -log10(get(pvalue.colNam)),
colour = ifelse(get(pvalue.colNam) <= pval & get(foldchange.colNam) >= log2(foldlog2),
"IP 5",
ifelse(get(pvalue.colNam) <= pval & get(foldchange.colNam) <= -log2(foldlog2),
"DR 2559",
"Non-enriched proteins")),
label = gene_symbols_or_id
)) +
geom_point(size = 0.9) +
scale_colour_manual(
name = "significantly more abundant:",
values = c(
"IP 5" = "#d8b500",
"DR 2559" = "#ea782c",
"Not significant" = "lightgrey"
)
)+
theme_classic() +
theme(
plot.title = element_blank(),
legend.position = c(1.5, 1.5),
legend.justification = c(1,1),
legend.direction = "vertical",
legend.background = element_blank(),
legend.text = element_text(size = 10),
legend.title = element_text(size = 10, face = "bold"),
axis.text = element_text(colour = "black")
) +
guides(colour = guide_legend(nrow = 1)) +
xlab("log2 fold change") +
ylab("-log10(p-value)") +
geom_hline(yintercept = -log10(pval), linetype = "dashed", color = "grey50", size = 0.6) +
geom_vline(xintercept = log2(foldlog2), linetype = "dashed", color = "grey50", size = 0.6) +
geom_vline(xintercept = -log2(foldlog2), linetype = "dashed", color = "grey50", size = 0.6) +
geom_label_repel(data = genes_to_label,#enriched_proteins,
aes(x = get(foldchange.colNam),
y = -log10(get(pvalue.colNam)),
label = gene_symbols_or_id),
size = 3,
color = "black",
fill = "white",
box.padding = 0.5,
point.padding = 0.5,
max.overlaps = Inf,
inherit.aes = FALSE)
DEAvolplot <- C
print(C)
rm(C)
